---
description: 記事作成時に有用なルール
globs: 
alwaysApply: false
---
記事を作成する場合は下記のポイントを満たすような記事を生成してください

## 高PV記事に共通するポイント（一般）

- **キャッチーなタイトル**  
  - 数字・強いキーワード・疑問形・Why/How を活用  
  - 読者への具体的ベネフィットや好奇心を刺激する語句を盛り込む  

- **読者の課題を解決する有益な内容**  
  - 明確な問題設定 → 解決策 → 実装例／結果 の順で構成  
  - チュートリアル・チェックリスト・成功／失敗談など再現性の高い情報を提供  

- **読みやすい構成とフォーマット**  
  - 見出し・段落・箇条書きで情報を小分けに  
  - 図表・画像・コードスニペットを適所に挿入して理解負荷を下げる  

- **ストーリー性・共感要素の挿入**  
  - 実体験や背景を交え、読者が「自分ごと化」できる流れに  
  - 驚き・発見・感情の起伏を意識して飽きさせない  

- **SEOと拡散経路の設計**  
  - 検索キーワードをタイトル・h2・本文に自然に配置  
  - 公開直後に SNS／コミュニティ投稿で初動トラフィックを獲得  
  - 定期的な追記・更新で検索順位と信頼性を維持  

---

## 高PV記事に特化したポイント（IT分野）

- **最新技術・トレンドをいち早くキャッチ**  
  - 新リリース・バージョンアップ・話題ライブラリを即日検証  
  - “Why it matters” を冒頭で示し、読者の導入ハードルを下げる  

- **具体的ハウツー／チュートリアル重視**  
  - 手順＋コマンド＋コード例を行単位で丁寧に解説  
  - 完全ガイド・スターターテンプレートを提供し“すぐ使える”を強調  

- **深掘りと専門性の担保**  
  - ベンチマーク・性能比較・内部実装解説など他記事と差別化できる深度  
  - 公式ドキュメントや論文を参照し、正確性と裏付けを示す  

- **コードスニペットとリポジトリ連携**  
  - GitHub リンク／デモサイトを添えて “動くもの” を証明  
  - コードはコピー＆ペースト可能な最小単位に分割し、コメントで補足  

- **コミュニティ連携とリアルタイム更新**  
  - タグ選定・投稿時間帯をコミュニティトレンドに合わせ最適化  

## Zenn特有のディレクトリとファイル構成

- **基本ディレクトリ構成**
  - `articles/`: 記事を格納するディレクトリ
  - `books/`: 本（複数チャプターの連載）を格納するディレクトリ
  - `images/`: 記事や本で使用する画像ファイルを配置できるディレクトリ（推奨）

- **ファイル命名規則（slug）**
  - ファイル名は記事のURLの一部（slug）として使用される重要な要素
  - 命名ルール: 半角英数字（a-z0-9）、ハイフン（-）、アンダースコア（_）の12〜50字の組み合わせ
  - 一度公開したslugは変更できないため、最初に適切な名前を設定することが重要
  - 検索エンジンにも影響するため、内容を適切に表す名前を選ぶ

- **記事のフロントマター設定**
  ```yaml
  ---
  title: "記事のタイトル" # 記事のタイトル
  emoji: "😸" # アイキャッチとして使われる絵文字（1文字だけ）
  type: "tech" # tech: 技術記事 / idea: アイデア記事
  topics: ["markdown", "zenn", "react"] # タグ（5つまで）
  published: true # 公開設定（falseにすると下書き）
  ---
  ```

- **本（books）の構成**
  - 本のディレクトリ名が本のslugとなり、URLに反映される
  - 1冊の本は最大100チャプターまで作成可能
  - 本の設定は`config.yaml`で管理する
  - 各チャプターは個別のmarkdownファイル（`◯◯.md`）で管理
  - `cover.png`または`cover.jpeg`でカバー画像を設定可能（推奨サイズ：幅500px・高さ700px）
  - 本の構成例:
    ```
    books/
    └── my-awesome-book
        ├── config.yaml # 本の設定
        ├── cover.png　# カバー画像
        ├── 1.intro.md # チャプター1
        ├── 2.content.md # チャプター2
        └── 3.conclusion.md # チャプター3
    ```

- **本のconfig.yaml設定例**
  ```yaml
  title: "本のタイトル"
  summary: "本の紹介文"
  topics: ["markdown", "zenn", "react"] # トピック（5つまで）
  published: true # falseだと下書き
  price: 0 # 有料の場合200〜5000円（100円単位）
  chapters:
    - intro # チャプター1
    - content # チャプター2
    - conclusion # チャプター3
  ```

- **画像管理方法**
  - リポジトリ内の画像は `![説明](/images/ファイル名.png)` の形式で参照可能
  - 画像ファイル名にも意味のある名前を付けることでSEO効果向上
  - 効率的な画像管理のためにディレクトリ構造を工夫する（例: `/images/記事slug名/画像.png`）
  - 代替手段として、Zennダッシュボードの「画像をアップロード」機能も利用可能

